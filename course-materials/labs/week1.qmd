---
title: "Week 1 Lab"
subtitle: "Making maps with `tmap`"
author: "Ruth Oliver"
date: last-modified
format:
  html:
    toc: true
---

In this lab, we'll explore the basics of map-making in R using the `tmap` package. The following materials are modified from the [tmap book](https://r-tmap.github.io/tmap-book/).

## 1. Why `tmap`?

- There are MANY ways to make maps in R, but `tmap` or "thematic maps" offers the most flexibility.
- `tmap` can handle vector and raster objects from the `sf`, `sp`, `raster`, and `stars` packages.
- The syntax of `tmap` is based on `ggplot2` and the Grammar of Graphics
- `tmap` supports static AND interactive maps (yay!)

## 2. Set Up

- Fork and clone this [repository](ADD LINK) to create a version controlled project for Week 1.
- Create a Quarto doc
- Install and load all necessary packages

```{r}
#| eval: false
install.packages("sf")
install.packages("stars")
install.packages("tmap")
```

```{r}
#| message: false
#| warning: false
library(sf) # for vector data (more soon!)
library(stars) # for raster data (more soon!)
library(tmap) # for static and interactive maps
library(here)
```

## 3. Specifying spatial data
Similar to plotting in `ggplot2`, in order to plot spatial data, at least two aspects need to be specified:

- the spatial data object to plot (e.g. `ggplot(data = )`)
- and the plotting method (e.g. `geom_points()`)

Let's load three spatial data objects to plot:

- a raster (more on this next week!) of elevations of the world
- a vector dataset (again, more soon!) of country boundaries
- a vector dataset of locations of major cities

```{r}
#| echo: false

# raster of global elevations
world_elevation <- read_stars(here("course-materials","data","worldelevation.tif"))

# country boundaries
world_vector <- read_sf(here("course-materials","data","worldvector.gpkg"))

# major cities
world_cities <- read_sf(here("course-materials","data","worldcities.gpkg"))

```

```{r}
#| eval: false

# raster of global elevations
world_elevation <- read_stars(here("data","worldelevation.tif"))

# country boundaries
world_vector <- read_sf(here("data","worldvector.gpkg"))

# major cities
world_cities <- read_sf(here("data","worldcities.gpkg"))

```

In `tmap`, the spatial object to plot needs to be defined within the function `tm_shape()`. This is analogous to defining the data frame to plot in `ggplot2` (`ggplot(data = )`). 

```{r}
# plotting a single spatial object

tm_shape(world_vector) + # defines the spatial object to plot
  tm_polygons() # defines how to plot the object

```

Similar to `ggplot2`, we can plot multiple datasets by adding layers. When multiple spatial objects are being plotted, each has to be defined in a separate `tm_shape()` call.

```{r}
# plotting two spatial objects

tm_shape(world_vector) + # defines the FIRST spatial object to plot
  tm_polygons() + # defines how to plot the FIRST object
tm_shape(world_cities) + # defines the SECOND objet to plot
  tm_dots() + # defines how to plot the SECOND object
  tm_text("name") # defines an additional way to plot the SECOND object

```

