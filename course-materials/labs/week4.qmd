---
title: "Week 4: Lab"
subtitle: "EDS 223: Geospatial Analysis & Remote Sensing"
author: "Ruth Oliver"
date: last-modified
execute: 
  eval: true
format:
  html:
    toc: true
editor_options: 
  chunk_output_type: console
---

```{r}
#| eval: true
#| echo: false
#| out-width: "30%"
#| fig-align: "center"
knitr::include_graphics("images/terra.png")
```

::: {.gray-text .center-text}
[terra](https://rspatial.github.io/terra/){target="_blank"}
:::

::: {.callout-note icon=true}
# Source Materials
The following materials are modified from [Chapters 3](https://geocompr.robinlovelace.net/attr.html), [4](https://geocompr.robinlovelace.net/spatial-operations.html), and [5](https://geocompr.robinlovelace.net/geometry-operations.html) of *Geocomputation with R* by Robin Lovelace.
:::

# Spatial data operations
## 1. Set Up

```{r install, include=TRUE, message=FALSE, warning=FALSE}
library(terra)
library(dplyr)
library(spData)
library(spDataLarge)
library(tmap)
library(kableExtra)
#library(geodata)
```


## 2. Raster objects

Raster data represents continuous surfaces, as opposed to the discrete features represented in the vector data model. Here we'll learn how to create raster data objects from scratch and how to do basic data manipulations.

### Creating raster objects

The `{terra}` package represents raster objects using the `SpatRaster` class. The easiest way to create `SpatRaster` objects is to read them in using the `rast()` function. Raster objects can handle both continuous and categorical data.

We'll start with an example of two datasets for Zion National Park from the `spDataLarge` package:

- `srtm.tif`: remotely sensed elevation estimates (continous data)
- `nlcd.tif`: simplified version of the National Land Cover Database 2011 product (categorical data)

```{r}
# create raster objects
zion_elevation <- rast(system.file("raster/srtm.tif", package = "spDataLarge"))
zion_land <- rast(system.file("raster/nlcd.tif", package = "spDataLarge"))

# test class of raster object
class(zion_elevation)

```

```{r}
#| code-fold: true
#| message: false
map1 <- tm_shape(zion_elevation) +
  tm_raster(title = "Elevation (m)") +
  tm_layout(legend.outside = TRUE)

map2 <- tm_shape(zion_land) +
  tm_raster(title = "Land cover") +
  tm_layout(legend.outside = TRUE)

tmap_arrange(map1, map2, nrow = 1)
```

The `SpatRaster` class can also handle multiple "layers". Layers can store different variables for the same region in one object. This is similar to attributes (or columns) in `data.frames`. Later in the course when we discuss multispectral data, we'll learn more about why remotely-sensed data will often contain multiple "bands" or layers. 

As an example, we'll load a dataset from `spDataLarge` containing the four bands of the Landsat 8 image for Zion National Park

```{r}
landsat <- rast(system.file("raster/landsat.tif", package = "spDataLarge"))

nlyr(landsat) # test number of layers in raster object
```

```{r}
#| code-fold: true
#| message: false

tm_shape(landsat) +
  tm_raster(title = "Unscaled reflectance")
```


We can subset layers using either the layer number or name:

```{r}
landsat3 <- subset(landsat, 3)
landsat4 <- subset(landsat, "landsat_4")
```

We can combine `SpatRaster` objects into one, using `c()`:

```{r}
landsat34 <- c(landsat3, landsat4)
```


### Inspecting raster objects

We can get info on raster values just by typing the name or using the summary function.

```{r}
summary(zion_elevation)
```

We can get global summaries, such as standard deviation.

```{r}
global(zion_elevation, sd)
```

Or we can use `freq()` to get the counts with categories.

```{r}
freq(zion_land)
```

### Indexing

We can index rasters using row-column indexing or cell IDs. 

```{r}
# row 1, column 1
zion_elevation[1, 1]

# cell ID 1
zion_elevation[1]
```

For multi-layer rasters, subsetting returns the values in both layers.

```{r}
landsat[1]
```

We can also modify/overwrite cell values.

```{r}
zion_elevation[1, 1] <- 0
zion_elevation[1, 1]
```

Replacing values in multi-layer rasters requires a matrix with as many columns as layers and rows as replaceable cells.
```{r}
landsat[1] <- cbind(c(0), c(0),c(0), c(0))
landsat[1]
```

We can also use a similar approach to replace values that we suspect are incorrect.

```{r}
test_raster <- zion_elevation
test_raster[test_raster < 20] <- NA
```

## 3. Spatial subsetting

We can move from subsetting based on specific cell IDs to extract info based on spatial objects.

To use coordinates for subsetting, we can "translate" coordinates into a cell ID with the functions `terra::cellFromXY()` or `terra::extract()`.

```{r}
# create point within area covered by raster
point <- matrix(c(-113, 37.5), ncol = 2)

# approach 1
# find cell ID for point
id <- cellFromXY(zion_elevation, xy = point)
# index to cell
zion_elevation[id]

# approach 2
# extract raster values at point
terra::extract(zion_elevation, point)
```

Raster objects can also subset with another raster object. Here we extract the values of our elevation raster that fall within the extent of a masking raster.

```{r}
# create a raster with a smaller extent
clip <- rast(xmin = -113.3, xmax = -113, ymin = 37.2, ymax = 37.9,
            resolution = 0.3,
            vals = 1)

# select values that fall within smaller extent
zion_elevation_clip <- zion_elevation[clip]

# verify that output has fewer values than original
if(ncell(zion_elevation) == nrow(zion_elevation_clip)) {
  warning("clipping did not remove cells")
} else {
  print("clipping removed cells")
}

```


In the previous example, we just got the values back. In some cases, we might want the output to be the raster cells themselves. 

We can do this use the "[" operator and setting "drop = FALSE".

This example returns the first 2 cells of the first row of the "elev" raster.

```{r}

zion_elevation_clip <- zion_elevation[clip, drop = FALSE]

```

```{r}
#| code-fold: true
#| message: false
map1 <- tm_shape(zion_elevation) +
  tm_raster(title = "Elevation (m)") +
  tm_layout(main.title = "original")

map2 <- tm_shape(zion_elevation_clip) +
  tm_raster(title = "Elevation (m)") +
    tm_layout(main.title = "clipped")


tmap_arrange(map1, map2, nrow = 1)  
```

:::{.callout-warning icon=true}
# Woops, is the clipped version really smaller?

Plotting side-by-side, the clipped version appears to take up more space -- does this mean the clipping didn't work? How can we tell?

- **Visually:** If we look at the features represented, we can see that the clipped version doesn't represent all the features present in the original version.
- **Quantitatively:** We can directly check whether the extents match using the `ext()` function!


```{r}
if(ext(zion_elevation) == ext(zion_elevation_clip)){
  print("extents match")
} else{
  print("extents do not match")
}
```

:::

Another common use of spatial subsetting is when we use one raster with the same extent and resolution to mask the another. In this case, the masking raster needs to be composed of logicals or NAs.

```{r}
# create raster mask of the same resolution and extent
rmask <- zion_elevation

rmask[rmask < 2000] <- NA
 
# spatial subsetting
masked1 <- zion_elevation[rmask, drop = FALSE]   # with [ operator
masked2 <- mask(zion_elevation, rmask)           # with mask()

```

```{r}
#| code-fold: true
#| message: false
map1 <- tm_shape(zion_elevation) +
  tm_raster(title = "Elevation (m)") +
  tm_layout(main.title = "original")

map2 <- tm_shape(masked1) +
  tm_raster(title = "Elevation (m)") +
  tm_layout(main.title = "bracket subsetting")

map3 <- tm_shape(masked2) +
  tm_raster(title = "Elevation (m)") +
  tm_layout(main.title = "mask()")

tmap_arrange(map1, map2, map3, nrow = 1) 
```


## 4. Map algebra
Here we define map algebra as the set of operations that modify or summarize raster cell values with reference to surrounding cells, zones, or statistical functions that apply to every cell.

### Local operations
Local operations are computed on each cell individually. We can use oridinary arithemetic or logical statements.

```{r}
#| eval: false
zion_elevation + zion_elevation
zion_elevation^2
log(zion_elevation)
zion_elevation > 5
```

We can also classify intervals of values into groups. For example, we could classify a DEM into low, middle, and high elevation cells:

First, we need to construct a reclassification matrix: 

  - The first column corresponds to the lower end of the class
  - The second column corresponds to the upper end of the class
  - The third column corresponds to the new value for the specified ranges in columns 1 and 2

```{r}
rcl <- matrix(c(1000, 1500, 1, 
                1500, 2000, 2, 
                2000, 2500, 3,
                2500, 3000, 4), 
                ncol = 3, byrow = TRUE)

# We then use this matrix to reclassify our elevation matrix
reclassified <- classify(zion_elevation, rcl = rcl)

values(reclassified) <- as.factor(values(reclassified))
```

```{r}
#| code-fold: true
#| message: false
map1 <- tm_shape(zion_elevation) +
  tm_raster(title = "Elevation (m)") +
  tm_layout(main.title = "original")

map2 <- tm_shape(reclassified) +
  tm_raster(title = "Elevation (m)") +
  tm_layout(main.title = "reclassified")

tmap_arrange(map1, map2, nrow = 1) 
```


For more efficient processing, we can use a set of map algebra functions:

- `app()` applies a function to each cell of a raster to summarize the values of multiple layers into one layer
- `tapp()` is an extension of `app()` that allows us to apply on operation on a subset of layers
- `lapp()` allows us to apply a function to each cell using layers as arguments

We can use the `lapp()`function to compute the Normalized Difference Vegetation Index (NDVI).

Let's calculate NDVI for Zion National Park using multispectral satellite data.


We need to define a function to calculate NDVI.

So now we can use `lapp()` to calculate NDVI in each raster cell. To do so, we just need the NIR and red bands.

```{r}
ndvi_fun <- function(nir, red){
  (nir - red) / (nir + red)
}

ndvi_rast <- lapp(landsat[[c(4, 3)]], fun = ndvi_fun)
```

```{r}
#| code-fold: true
#| message: false
tm_shape(ndvi_rast) +
  tm_raster(title = "NDVI")
```

### Focal Operations
Local operations operate on one cell, though from multiple layers. Focal operations take into account a central (focal) cell and its neighbors. The neighborhood (or kernel, moving window, filter) can take any size or shape. A focal operation applies an aggregation function to all cells in the neighborhood and updates the value of the central cell before moving on to the next central cell

We can use the `focal()` function to perform spatial filtering. We define the size, shape, and weights of the moving window using a matrix. Here we find the minimum.

```{r}

elevation_focal <- focal(zion_elevation, w = matrix(1, nrow = 9, ncol = 9), fun = min)

```

```{r}
#| code-fold: true
#| message: false
map1 <- tm_shape(zion_elevation) +
  tm_raster(title = "Elevation (m)") +
  tm_layout(main.title = "original")

map2 <- tm_shape(elevation_focal) +
  tm_raster(title = "Elevation (m)") +
  tm_layout(main.title = "aggregated")

tmap_arrange(map1, map2, nrow = 1) 
```

:::{.callout-tip icon=true}
# Critical thinking

What should we expect to observe in the output here?
:::

### Zonal Operations
Similar to focal operations, zonal operations apply an aggregation function to multiple cells. However, instead of applying operations to neighbors, zonal operations aggregate based on "zones". Zones can are defined using a categorical raster and do not necessarily have to be neighbors

For example, we could find the average elevation for within the elevations zones we created.

```{r}

zonal(zion_elevation, reclassified, fun = "mean") %>%
  kable(col.names = c("Elevation zone", "Mean elevation (m)")) %>% 
  kable_styling(bootstrap_options = "striped", full_width = FALSE)
```

### Merging Rasters
In some cases, data for a region will be stored in multiple, contiguous files. To use them as a single raster, we need to merge them.

In this example, we download elevation data for Austria and Switzerland and merge the two rasters into one.

```{r}
#| eval: false
aut <- geodata::elevation_30s(country = "AUT", path = tempdir())
ch <- geodata::elevation_30s(country = "CHE", path = tempdir())
aut_ch <- merge(aut, ch)
```


# Geometric Operations
When merging or performing map algebra, rasters need to match in their resolution, projection, origin, and/or extent

## 1. Changing extent, origin, and resolution
### Extent
In the simplest case, two images differ only in their extent. Let's start by increasing the extent of a elevation raster.

```{r include=TRUE}
elev_2 <- extend(zion_elevation, c(1, 200)) # add one row and two columns

```

Performing algebraic operations on objects with different extents doesn't work.

```{r include=TRUE, eval=FALSE}
elev + elev_2
```

We can align the extent of the 2 rasters using the `extend()` function. Here we extend the elev object to the extent of elev_2 by adding NAs.

```{r include=TRUE}
elev_3 <- extend(zion_elevation, elev_2)
```

### Origin
the origin function returns the coordinates of the cell corner closes to the coordinates (0,0). We can also manually change the origin.

```{r include=TRUE}
#| eval: false
origin(elev_4)
origin(elev_4) <- c(0.25, 0.25)
origin(elev_4)
```

### Resolution
Raster datasets can also differ in their resolution to match resolutions we can decrease the resolution by aggregating or increase the resolution by disaggregating.

Digital elevation model (DEM) of the Mongón study area, a Peruvian fog oasis.
Let's start by coarsening the resolution of a DEM by a factor of 5, by taking the mean.

```{r include=TRUE}
dem <- rast(system.file("raster/dem.tif", package = "spDataLarge"))
dem_agg <-  aggregate(dem, fact = 5, fun = mean)
```

```{r}
#| code-fold: true
#| message: false
map1 <- tm_shape(dem) +
  tm_raster(title = "Elevation (m)") +
  tm_layout(legend.show = FALSE,
            main.title = "original")

map2 <- tm_shape(dem_agg) +
  tm_raster(title = "Elevation (m)") +
  tm_layout(main.title = "aggregated")

tmap_arrange(map1, map2, nrow = 1) 
```


We have some choices when increasing the resolution. Here, we try the bilinear method.

```{r include=TRUE}
dem_disagg <- disagg(dem_agg, fact = 5, method = "bilinear")

if(identical(dem, dem_disagg)){
  print("disaggregated data matches original")
} else {
  warning("disaggregated data does not match original")
}


```

```{r}
#| code-fold: true
#| message: false

map2 <- map2 +
  tm_layout(legend.show = FALSE)

map3 <- tm_shape(dem_disagg) +
  tm_raster(title = "Elevation (m)") +
  tm_layout(main.title = "disaggregated")

tmap_arrange(map1, map2, map3, nrow = 1) 
```


## Resampling

Aggregation/disaggregation work when both rasters have the same origins. 

But what do we do in the case where we have two or more rasters with different origins and resolutions? Resampling computes values for new pixel locations based on custom resolutions and origins.

In most cases, the target raster would be an object you are already working with, but here we define a target raster.

```{r include=TRUE}
target_rast <- rast(xmin = 794600, xmax = 798200,
                   ymin = 8931800, ymax = 8935400,
                   resolution = 150, crs = "EPSG:32717")

dem_resampl <- resample(dem, y = target_rast, method = "bilinear")

```

```{r}
#| code-fold: true
#| message: false


map4 <- tm_shape(dem_resampl) +
  tm_raster(title = "Elevation (m)") +
  tm_layout(main.title = "resampled")

tmap_arrange(map1, map4, nrow = 1) 
```
