---
title: "Plotting Geospatial Data"
author: Juliet Cohen
date: 2024-09-04
format: html
---

**TODO:**

-   Include recs from guide screenshots (when to use which package)

-   load in polygon and raster data (with API?), can be not related to the point data

-   include visual to explain how polygon data can be overlaid on top of raster data / converted from points/lines to pixels

-   consider folding chunks for API(s) so users can focus on the plotting code

-   add an enhanced ggplot point map - colored/different basemap, subtitle, etc.

-   increase limit for point data pulled in from GBIF?

- interate plot_sf too?

# Plotting Geospatial Data

In R, various geospatial packages exist for visualizing and manipulating spatial data:

-   `sf`
-   `ggplot2`
-   `mapview`
-   `leaflet`
-   `tmap`
-   `terra`
-   `tidyterra`

Visualizing vector data, raster data, or both overlaid can be accomplished in various ways. This guide provides code examples and explanations for which are recommended to get the most out of your visualizations.

```{r Import Packages, include = FALSE}
# install all required packages if not already installed
pkg <- c("sf", 
         "terra", 
         "tidyterra", 
         "ggplot2", 
         "tmap", 
         "rgbif", 
         "mapview",
         "leaflet",
         "rnaturalearth", 
         "rnaturalearthdata",
         "tidyverse",
         "RColorBrewer")

new.pkg <- pkg[!(pkg %in% installed.packages())]
if (length(new.pkg)){install.packages(new.pkg)}

## Load libraries, set directories
lapply(pkg, library, character.only = TRUE)
```

## Vector Data: Points

`sf`, `tmap` and `ggplot2` specialize in vector data, which is tabular data.

Examples of vector file formats:

-   shapefiles (`.shp` and their auxillary files `.shx`, `.dbf`, `.prj`)
-   GeoPackages (`.gpkg`)
-   GeoParquet (`.parquet`)
-   GeoJSON (`.geojson`)

Use the `gbif` API to download species observations for polar bears from the [Global Biodiversity Information Facility](https://www.gbif.org/). Tabular downloaded straight to your working directory will not always have spatial metadata associated with it, so you may have to assign it using spatial package functions.

```{r}
# read in a list of items containing polar bear data, including metadata
pb_data <- occ_search(scientificName = "Ursus maritimus", 
                      limit = 300)

# subset the imported data to just the relevant dataframe and attributes
pb_obs <- pb_data$data %>% 
  select(decimalLongitude, 
         decimalLatitude, 
         year,
         country) %>%
  mutate(year = as.factor(year)) # year = categorical
  
# remove any rows with an NA in any col
pb_obs <- na.omit(pb_obs)
```


### sf

Point data in tabular format may separate latitude and longitude into separate columns and may not come with spatial metadata such as a coordinate reference system (CRS). `sf` can help create a `geometry` column from separate latitude and longitude columns and set the CRS to WGS84, `EPSG:4326`).

```{r}
# convert separate longitude and latitude columns into 
# cohesive point geometries, and set the CRS
pb_spatial <- pb_obs %>% 
  sf::st_as_sf(coords = c("decimalLongitude", "decimalLatitude"),
               crs = st_crs(4326)) %>% 
              filter(st_is_valid(.))
```

### Base R plot()

Simply plot the point data using the native R function `plot()`.

```{r}
plot(st_geometry(pb_spatial),
     main = "Polar Bear Observations",
     col = "black",
     pch = 16,
     axes = TRUE,
     xlab = "Longitude",
     ylab = "Latitude")
```

That plot is pretty simple, and it has little context without a palette or a basemap. Make an interactive map with the color of the points representing the year of the observation, and a basemap. This can be done with either `mapview` or `leaflet`.

#### mapview

```{r}
mapview(pb_spatial,
        zcol = "year",
        map.types = "Esri.NatGeoWorldMap",
        legend = TRUE,
        layer.name = "Polar Bear Observations")
```

Note how the points are clickable, and metadata pops up.

#### leaflet

```{r}
palette <- colorFactor(
  palette = 'viridis',
  domain = pb_spatial$year
)

leaflet(data = pb_spatial) %>%
  addProviderTiles("Esri.NatGeoWorldMap") %>% 
  addCircleMarkers(
    radius = 5,
    color = "black",  # point edges
    fillColor = ~palette(year),
    fillOpacity = 0.7,
    stroke = TRUE,
    weight = 1,  # point edge thickness
    popup = ~paste("Year:", year) # clickable points, show observation year
  ) %>%
  addLegend(
    "bottomright",
    pal = palette, 
    values = ~year,
    title = "Polar Bear Observations",
    opacity = 1
  )
```

### `ggplot` polygons

`sf` and `ggplot` can be used in conjunction to plot the polar bear observations statically on a basemap.

```{r}
world <- rnaturalearth::ne_countries(scale = "medium", returnclass = "sf") 

ggplot(data = world) +
  geom_sf() +
  geom_sf(data = pb_spatial, 
          aes(fill = year),  # point color based on 'year'
          color = "black",  # point edges black
          shape = 21,
          size = 2, 
          alpha = 0.7) +  # transparency
  labs(title = "Polar Bear Observations in the Arctic & sub-Arctic Region",
       x = "Longitude",
       y = "Latitude",
       fill = "Year") +
  # limit map to polar bear habitat latitudes
  coord_sf(xlim = c(-180, 180), ylim = c(45, 90), expand = FALSE) +
  theme_minimal() + 
  theme(legend.position = "right")
```


### `tmap` points

`tmap` is based on `ggplot`, but is specifically designed for *mapping* rather than *plotting* with many tailorable options. It recognizes spatial objects from `sf`, `terra`, and other geospatial packages. `tmap` can make both static and interactive maps, as it builds on `ggplot` and `leaflet`. More detailed basemaps, like those availble in `leaflet`, are only an option in interactive mode for `tmap`. For large-scale data, you can load in a simple world map to use as a basemap.  

`tmap` allows for fine control over the locations of the title and legend. You can choose inside or outside the map, with values between 0-1 specified for the `x` and `y` position.

```{r}
data(World)

tm_shape(World) +
  tm_borders(col = "black", lwd = 0.5) +
  tm_fill(col = "white") +
  tm_shape(pb_spatial) +
  tm_dots(col = "year",
          palette = 'viridis',
          size = 0.1,
          border.col = "black",
          title = "Year") +
  tm_layout(
    bg.color = "lightblue",
    frame = TRUE,
    title.position = c(0.01, 0.5),
    title.size = 1.2,
    legend.position = c(0.01, 0.2),
    title = "Polar Bear\nObservations"
  )
```

## Vector Data: Polygons

Polygon data is composed of multiple points connected by lines to create closed shapes. Since there are many polar bears in Canada, let's plot the polar bear observations on top of only Canada and Greenland polygons using both `tmap` and `ggplot`.

First, we can subset the world's polygons from `rnaturalearth` to just those for Svalbard and Jan Mayen, based on the International Organization for Standardization (ISO) code.

```{r}
canada_greenland <- rnaturalearth::ne_countries(scale = "medium", 
                                                returnclass = "sf") %>% 
                                   filter(admin %in% c("Canada", "Greenland"))
```

We only want to plot the polar bear points that fit within these polygons, so we can execute a spatial join.

```{r}
pb_canada_greenland <- st_join(pb_spatial, 
                               canada_greenland, 
                               join = st_within,
                               left = FALSE)
```


### `ggplot` points and polygons

```{r}
blue_palette <- RColorBrewer::brewer.pal(n = 2, name = "Blues")

ggplot(data = canada_greenland) +
  geom_sf(aes(fill = admin), color = "black") +
  scale_fill_manual(values = blue_palette) +
  geom_sf(data = pb_canada_greenland,
          color = "red",
          size = 1) +
  theme_minimal() +
  labs(title = "Canada and Greenland Polar Bear Observations",
       fill = "Country",
       xlab = "Longitude",
       ylab = "Latitude")
```

### `tmap` points and polygons

```{r}
tm_shape(canada_greenland) + 
  tm_fill(col = "admin", 
          palette = blue_palette, 
          title = "Country") +
  tm_borders(col = "black") +
  tm_shape(pb_canada_greenland) +
  tm_dots(col = "red", size = 0.1) +
  tm_grid(lines = TRUE,
          col = "gray",
          labels.inside.frame = TRUE,
          n.x = 10, n.y = 10, # number of gridlines on x and y axes
          alpha = 0.5) +
  tm_layout(title = "Canada and Greenland\nPolar Bear Observations",
            title.size = 1,
            legend.title.size = 0.9,
            legend.text.size = 0.8,
            title.position = c(0.68, 0.31)) +
  tm_xlab("Longitude") +
  tm_ylab("Latitude")
```


###

## Raster Data

`terra` and `tidyterra` specialize in raster data processing, which are n-dimensional arrays.

Examples of file formats:

-   GeoTIFF (Tag Image File Format, `.tif`)
-   netCDF (Network Common Data Form, `.nc`)
-   PNG or JPEG images (`.png`, `.jpg`)

### terra

```{r}

```

### `tidyterra`

```{r}


```
