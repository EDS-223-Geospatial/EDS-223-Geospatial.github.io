---
title: "Week 2: Discussion Section"
subtitle: "Working with multiple vector types"
author: "Alessandra Vidal Meza"
date: last-modified
execute: 
  eval: false
format:
  html:
    toc: true
    code_folding: hide
---

::: callout-tip
## Reference

Refer to the [Plotting Geospatial Data](course-materials/resources/plotting.qmd) resource to help get you started.
:::

## Learning Objectives

- Use `st_read()` to read multiple vector data types
- Retreive the CRS of a vector object with `st_crs()`
- Transform CRS and match across all vector data types with `st_transform()`
- Perform attribute manipulations (e.g. `filter()`, `mutate()`, `select()`)

## Data

- **Colombia's Terrestrial Ecosystems** ([The Nature Conservancy/NatureServe](https://databasin.org/datasets/e4ebf6df95094104a05c68b72a8b3e55/))
- **Colombia's Roads** ([Esri](https://databasin.org/datasets/d383d26773fe4524b5a69e957f2befd6/))
- **Bird Observations** ([DATAVES](https://doi.org/10.15472/iqnpse))

### Citations

Red Nacional de Observadores de Aves, Naranjo Maury G (2022). DATAVES. Version 7.5. Red Nacional de Observadores de Aves - RNOA. Occurrence dataset [https://doi.org/10.15472/iqnpse](https://doi.org/10.15472/iqnpse) accessed via [GBIF.org](https://www.gbif.org/) on 2024-09-14.

## Get Started

Let's load the necessary packages:

```{r}
#| message: false
#| warning: false

library(tidyverse)
library(sf)
library(tmap)
```

Now, to meet our learning objectives, your task:

1. Read in the data for Colombia's ecoregions, roads, and bird observations
  - Use `st_read()` to read vector data (e.g., .shp, .gdb)
  - Use `rename()` or `mutate()` to rename the columns `decimal_longitude` and `decimal_latitude` to `long` and `lat` in `aves` and `st_as_sf()` to convert it into an sf object
    - **Hint**: To convert a table into a vector object, you can use `st_as_sf()` but remember to check the `class()` of an object first!
2. Check `class()` of all vector objects (including the converted `aves`) and use `st_geometry_type()` to check the geometry type
3. Use `filter()` to select a macro region of interest from `N1_MacroBi` in Colombia's ecoregions dataset
  - Check `class()` of the new vector data
  - Plot the new vector data using `tmap`
4. Use `st_crs()` to retrieve CRS of all vector objects and assign a new CRS
  - **Bonus**: Check units of your object with `st_crs()$units`
  - Check CRS of all vector objects with `st_crs()`
  - `st_crs() <- NA` is a brute force way to remove a CRS, instead:
    - For the bird observations dataset, extract the longitude and latitude from the `geometry` column and use `st_drop_geometry()`
    - Convert `long` and `lat` into a geometry again with `st_as_sf()` to obtain a proper `sf` data frame
5. Let's bring all vector data types together
  - Check that the CRS of the ecoregions and roads datasets match
  - Transform CRS of the bird observations data using `st_transform()` to match with the other datasets
  - Use `tmap` to plot the ecoregions, roads, and bird observations together

## Answer Key

### Read in Vector Data

```{r}
col <- sf::st_read(here::here("week2-discussion", "Colombia", "Colombia.shp"))
roads <- sf::st_read(here::here("week2-discussion", "RDLINE_colombia", "RDLINE_colombia.shp"))
aves <- readr::read_csv(here::here("week2-discussion", "dataves.csv")) %>%
  dplyr::as_tibble() %>%
  dplyr::rename(long = decimal_longitude) %>%
  dplyr::mutate(lat = decimal_latitude) %>%
  sf::st_as_sf(coords = c("long", "lat"), crs = 4326)
```

### Check Class and Geometry Type

```{r}
class(col)
class(roads)
class(aves)
```

```{r}
unique(sf::st_geometry_type(col))
unique(sf::st_geometry_type(roads))
unique(sf::st_geometry_type(aves))
```

### `filter()` for Macro Region of Interest

```{r}
col_andean <- col %>%
  dplyr::mutate(N1_MacroBi = as.factor(N1_MacroBi)) %>%
  dplyr::filter(N1_MacroBi == "Andean")

class(col_andean)

tmap::tm_shape(col_andean) +
  tmap::tm_polygons()
```

### Coordinate Reference System 

```{r}
sf::st_crs(col)
sf::st_crs(roads)
sf::st_crs(aves)

sf::st_crs(col)$units
sf::st_crs(roads)$units
sf::st_crs(aves)$units

aves_df_purrr <- aves %>%
  dplyr::mutate(lon = unlist(purrr::map(aves$geometry, 1)),
                lat = unlist(purrr::map(aves$geometry, 2))) %>% 
  sf::st_drop_geometry()

aves_df_st_coords <- aves %>%
    dplyr::mutate(lon = sf::st_coordinates(.)[,1],
                  lat = sf::st_coordinates(.)[,2]) %>%
  sf::st_drop_geometry()

aves_df_purrr <- aves %>%
  sf::st_as_sf(coords = c("lon", "lat"), crs = 4326)
```

### Bring All Vector Data Types Together

```{r}
sf::st_crs(col) == sf::st_crs(roads)

aves <- sf::st_transform(aves, crs = sf::st_crs(col))

tmap::tm_shape(col) +
  tmap::tm_polygons() +
  tmap::tm_shape(roads) +
  tmap::tm_lines() +
  tmap::tm_shape(aves) +
  tmap::tm_dots()
```



