---
title: "Week 5: Discussion Section"
subtitle: "Practice raster operations with vectors"
author: "Alessandra Vidal Meza"
date: last-modified
execute: 
  eval: false
format:
  html:
    toc: true
---

:::{.callout-tip icon=true}
## Reference
Refer to [Chapter 6](https://r.geocompx.org/raster-vector) of *Geocomputation with R* to help get you started.
:::

## Learning Objectives

- Use `terra::crop()` and `terra::mask()` to create a subset of a raster or vector 
- Use `terra::aggregate()` and `terra::resample()` to create a new raster or vector
- Use `terra::as.polygons()` to convert a raster to a vector of polygons

## Get Started

Let's load the necessary packages:

```{r}
#| message: false
#| warning: false

library(tidyverse)
library(sf)
library(terra)
library(spData)
library(spDataLarge)
library(tidyverse)
```

```{r}
zion_points <- read_sf(system.file("vector/zion_points.gpkg", package = "spDataLarge"))

srtm <- terra::rast(system.file("raster/srtm.tif", package = "spDataLarge"))

zion_convex_hull <- sf::st_combine(zion_points) %>%
  sf::st_convex_hull() %>% 
  st_as_sf()

grain <- terra::rast(system.file("raster/grain.tif", package = "spData"))
```

Now, to meet our learning objectives, your task:

1. Crop and mask the `srtm` raster using (1) `zion_points` and (2) `zion_convex_hull`
  - Are there any differences in the output maps with `terra::crop()`? What about with `terra::mask()`? 
  - What happens when you set `inverse = TRUE` in `terra::mask()`?
2. Subset points higher than 3100 meters in `nz_height` and create a template raster with `terra::rast()`, where the resolution is 3 km x 3 km for the extent of the subset dataset
  - Count numbers of the highest points in each grid cell
  - Find the maximum elevation in each grid cell
3. With the previous raster, complete the following:
  - Aggregate the raster that counts the highest points in New Zealand/Aotearoa
  - Reduce its geographic resolution by half, such that cells are 6 x 6 km
  - Plot the result
  - Resample back to the original resolution of 3 km x 3 km
4. Polygonize `grain` and filter to only keep squares that represent clay

## Answer Key

### Crop and Mask `srtm`

```{r}
srtm_crop1 <- crop(srtm, zion_points)
srtm_crop2 <- crop(srtm, zion_convex_hull)
plot(srtm_crop1, main = "Crop of srtm and zion_points")
plot(srtm_crop2, main = "Crop of srtm and zion_convex_hull")

srtm_mask1 <- mask(srtm, zion_points)
srtm_mask2 <- mask(srtm, zion_convex_hull)
plot(srtm_mask1, main = "Mask of srtm and zion_points")
plot(srtm_mask2, main = "Mask of srtm and zion_convex_hull")

srtm_inv_mask1 <- mask(srtm, zion_points, inverse = TRUE)
srtm_inv_mask2 <- mask(srtm, zion_convex_hull, inverse = TRUE)
plot(srtm_inv_mask1, main = "Inverse mask of srtm and zion_points")
plot(srtm_inv_mask2, main = "Inverse mask of srtm and zion_convex_hull")
```

### Subset Points in New Zealand/Aotearoa

```{r}
nz_height3100 <- nz_height %>% 
  dplyr::filter(elevation > 3100)

nz_template <- rast(terra::ext(nz_height3100), resolution = 3000, crs = terra::crs(nz_height3100))
```

### Count Points in Each Grid Cell

```{r}
nz_raster <- rasterize(nz_height3100, nz_template, field = "elevation", fun = "length")
plot(nz_raster, main = "Number of Elevation Points > 3100 in Each Grid Cell")
plot(st_geometry(nz_height3100), add = TRUE)
```

### Find Maximum Elevation in Each Grid Cell

```{r}
nz_raster2 <- rasterize(nz_height3100, nz_template, field = "elevation", fun = max)
plot(nz_raster2, main = "Maximum Elevation in Each Grid Cell ")
plot(st_geometry(nz_height3100), add = TRUE)
```

### Aggregate and Resample Raster

```{r}
nz_raster_low <- aggregate(nz_raster, fact = 2, fun = sum, na.rm = TRUE)

nz_resample <- resample(nz_raster_low, nz_raster)

plots <- c(nz_raster, nz_resample)
labs <- c("Original 6 x 6 km", "Resample 6 x 6 km")
plot(plots, main = labs)
plot(nz_raster_low, main = "Resample 3 x 3 km")
```

### Vectorize Raster

```{r}
grain_poly <- as.polygons(grain) %>% 
  st_as_sf()

plot(grain, main = "Grain (Raster)")
plot(grain_poly, main = "Grain (Vector)")

clay <- grain_poly %>% 
  dplyr::filter(grain == "clay")

plot(clay, main = "Clay")
```

