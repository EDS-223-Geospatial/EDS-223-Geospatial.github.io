---
title: "Discssuion Week 4: Raster Operation Basics"
subtitle: "EDS 223: Geospatial Analysis & Remote Sensing"
author: "Allie Caughmam"
date: last-modified
format:
  html:
    toc: true
---

The following exercises are modified from [Chapters 3](https://geocompr.robinlovelace.net/attr.html), [4](https://geocompr.robinlovelace.net/spatial-operations.html), [5](https://geocompr.robinlovelace.net/geometry-operations.html) of Geocomputation with R by Rovin Lovelace.

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Prerequisites

```{r load, include=TRUE, message=FALSE, warning=FALSE}
library(sf)
library(terra)
library(spData)
library(geodata)
library(spDataLarge)
library(tidyverse)
```

```{r}
dem <- rast(system.file("raster/dem.tif", package = "spDataLarge"))
landsat <- rast(system.file("raster/landsat.tif", package = "spDataLarge"))
peru_dem <- geodata::elevation_30s(country = "Peru", path = ".", mask = FALSE)
srtm <- rast(system.file("raster/srtm.tif", package = "spDataLarge"))
```

## Exercise 1

Plot the histogram and the boxplot of the **dem.tif** file from the spDataLarge package:

```{r}
hist(dem)
```

## Exercise 2

Let's manipulate rasters by eclassifying the elevation in three classes:

- Low (less than 300)
- Medium
- High (greater than 500)

```{r}
plot(dem)

rcl <- matrix(c(-Inf, 300, 0, 300, 500, 1, 500, Inf, 2), ncol = 3, byrow = TRUE)

dem_rcl <- terra::classify(dem, rcl = rcl)

levels(dem_rcl) <- tibble::tibble(id = 0:2, cats = c("low", "medium", "high"))

plot(dem_rcl)
```

And compute the mean elevation for each altitudinal class:

```{r}
elevation_mean <- terra::zonal(dem, dem_rcl, fun = "mean")
elevation_mean
```

Next, let's calculate the Normalized Difference Water Index (NDWI) of a Landsat image:

- NDWI = (green - NIR)/(green + NIR)

```{r}
ndwi_fun <- function(green, nir){
    (green - nir) / (green + nir)
}

ndwi_rast <- terra::lapp(landsat[[c(2, 4)]], fun = ndwi_fun)
plot(ndwi_rast)
```

Calculate a correlation between NDVI and NDWI for this area:

```{r}
ndvi_fun <- function(nir, red){
  (nir - red) / (nir + red)
}

ndvi_rast <- terra::lapp(landsat[[c(4, 3)]], fun = ndvi_fun)
```

```{r}
combine <- c(ndvi_rast, ndwi_rast)

plot(combine)

terra::layerCor(combine, fun = cor)
```

Use `terra::distance()` to compute distances from all cells of Peru to it's nearest coastline. According to the documentation, `terra::distance()` will calculate distance for all cells that are `NA` to the nearest cell that are not `NA`.

```{r}
peru_dem <- terra::aggregate(peru_dem, fact = 20)
plot(peru_dem)

water_mask <- is.na(peru_dem)
water_mask[water_mask == 0] <- NA
plot(water_mask)

distance_to_coast <- terra::distance(water_mask)
distance_to_coast_km <- distance_to_coast / 1000

plot(distance_to_coast_km, main = "Distance to the coast (km)")
```

Try to modify the approach used in the above exercise by weighting the distance raster with the elevation raster:

- Every 100 altitudinal meters should increase the distance to the coast by 10 km
- Next, compute and visualize the difference between the raster created using the Euclidean distance (E7) and the raster weighted by elevation

```{r}
distance_to_coast_km2 <- distance_to_coast_km + ((peru_dem /100) * 10)
plot(distance_to_coast_km2)
```


## Exercise 3

Let's try some geometry operations with rasters!

The srtm raster has a resolution of 0.00083 by 0.00083 degrees.

Your task: change its resolution to 0.01 by 0.01 degrees using all of the method available in the **terra** package. And plot the results!

```{r}
plot(srtm)

rast_template <- terra::rast(terra::ext(srtm), res = 0.01)

srtm_resampl1 <- terra::resample(srtm, y = rast_template, method = "bilinear")
srtm_resampl2 <- terra::resample(srtm, y = rast_template, method = "near")
srtm_resampl3 <- terra::resample(srtm, y = rast_template, method = "cubic")
srtm_resampl4 <- terra::resample(srtm, y = rast_template, method = "cubicspline")
srtm_resampl5 <- terra::resample(srtm, y = rast_template, method = "lanczos")
```

```{r}
srtm_resampl_all <- c(srtm_resampl1, srtm_resampl2, srtm_resampl3, srtm_resampl4, srtm_resampl5)
plot(srtm_resampl_all)
```

