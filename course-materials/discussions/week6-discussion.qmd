---
title: "Week 6: Discussion Section"
subtitle: "Bring vector and raster togehter"
author: "Allie Caughmam"
date: last-modified
execute: 
  eval: false
format:
  html:
    toc: true
---

The following exercises are modified from [Chapter 6 of Geocomputation with R by Rovin Lovelace](https://r.geocompx.org/raster-vector).

## Learning Objectives

- Use `crop()` and `mask()` to create a subset of a dataset 
- Use `aggregate()` and `resample()` to create a new dataset

## Get Started

Let's load the necessary packages:

```{r}
#| message: false
#| warning: false

library(sf)
library(terra)
library(spData)
library(spDataLarge)
library(tidyverse)
```

```{r}
zion_points <- read_sf(system.file("vector/zion_points.gpkg", package = "spDataLarge"))

srtm <- terra::rast(system.file("raster/srtm.tif", package = "spDataLarge"))

ch <- sf::st_combine(zion_points) %>%
  sf::st_convex_hull() %>% 
  sf::st_as_sf()

grain <- terra::rast(system.file("raster/grain.tif", package = "spData"))
```

Now, to meet our learning objectives, your task:

1. Crop the `srtm` raster using (1) `zion_points` and (2) `ch`
  - Are there any differences in the output maps? 
  - Next, mask `srtm` using these two datasets. Can you see any difference now?
2. Subset points higher than 3100 meters in `nz_height` and create a template raster with a resolution of 3 km x 3 km for the extent of the subset dataset
  - Count numbers of the highest points in each grid cell
  - Find the maximum elevation in each grid cell
3. With the previous raster, complete the following:
  - Aggregate the raster counting high points in New Zealand
  - Reduce its geographic resolution by half, such that cells are 6 x 6 km
  - Plot the result
  - Resample back to the original resolution of 3 km x 3 km
4. Polygonize `grain` and filter all squares representing clay

## Answer Key

### Crop and mask the `srtm` raster

```{r}
srtm_crop1 <- terra::crop(srtm, zion_points)
srtm_crop2 <- terra::crop(srtm, ch)
plot(srtm_crop1)
plot(srtm_crop2)

srtm_mask1 <- terra::mask(srtm, zion_points)
srtm_mask2 <- terra::mask(srtm, ch)
plot(srtm_mask1)
plot(srtm_mask2)
```

### Subset points higher than 3100 meters in New Zealand

```{r}
nz_height3100 <- nz_height %>% 
  dplyr::filter(elevation > 3100)

nz_template <- terra::rast(terra::ext(nz_height3100),
                           resolution = 3000, crs = terra::crs(nz_height3100))
```

### Count numbers of the highest points in each grid cell

```{r}
nz_raster <- terra::rasterize(nz_height3100, nz_template, field = "elevation", fun = "length")
plot(nz_raster)
plot(st_geometry(nz_height3100), add = TRUE)
```

### Find maximum elevation in each grid cell

```{r}
nz_raster2 <- terra::rasterize(nz_height3100, nz_template, field = "elevation", fun = max)
plot(nz_raster2)
plot(st_geometry(nz_height3100), add = TRUE)
```

### Aggregate raster

```{r}
nz_raster_low <- raster::aggregate(nz_raster, fact = 2, fun = sum, na.rm = TRUE)

nz_resample <- terra::resample(nz_raster_low, nz_raster)
plot(nz_raster_low)
plot(nz_resample) # the results are spread over a greater area and there are border issues
plot(nz_raster)
```

### Polygonize and filter grain dataset for clay

```{r}
grain_poly <- as.polygons(grain) %>% 
  sf::st_as_sf()

plot(grain)
plot(grain_poly)

clay <- grain_poly %>% 
  dplyr::filter(grain == "clay")

plot(clay)
```

